/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.27
 * Generated at: 2015-11-30 17:07:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n");
      out.write("    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\r\n");
      out.write("\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\r\n");
      out.write("\r\n");
      out.write("    <title>atomantic/JavaScript-Playing-Cards @ GitHub</title>\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"playingCards.ui.css\"/>\r\n");
      out.write("    <style type=\"text/css\">\r\n");
      out.write("        body {\r\n");
      out.write("          margin-top: 1.0em;\r\n");
      out.write("          background-color: #fff;\r\n");
      out.write("          font-family: \"Helvetica,Arial,FreeSans\";\r\n");
      out.write("          color: #000000;\r\n");
      out.write("    }\r\n");
      out.write("    #container {\r\n");
      out.write("      margin: 0 auto;\r\n");
      out.write("      width: 860px;\r\n");
      out.write("    }\r\n");
      out.write("        h1 { font-size: 40px; color: #64052a; margin-bottom: 3px; }\r\n");
      out.write("        h1 .small { font-size: 0.4em; }\r\n");
      out.write("        h1 a { text-decoration: none }\r\n");
      out.write("        h2 { font-size: 1.5em; color: #64052a; }\r\n");
      out.write("    h3 { text-align: center; color: #64052a; }\r\n");
      out.write("    a { color: #64052a; }\r\n");
      out.write("    .description { font-size: 1.2em; margin-bottom: 30px; margin-top: 30px; font-style: italic;}\r\n");
      out.write("    .download { float: right; }\r\n");
      out.write("        pre { background: #000; color: #fff; padding: 15px;}\r\n");
      out.write("    hr { border: 0; width: 80%; border-bottom: 1px solid #aaa}\r\n");
      out.write("    .footer { text-align:center; padding-top:30px; font-style: italic; }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    h2{\r\n");
      out.write("        clear:both;\r\n");
      out.write("    }\r\n");
      out.write("    #error{\r\n");
      out.write("        display:none;color:#f00;border:1px solid #f60;padding:5px;margin:5px;\r\n");
      out.write("    }\r\n");
      out.write("    </style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("  <a href=\"http://github.com/atomantic/JavaScript-Playing-Cards\"><img style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\" alt=\"Fork me on GitHub\" /></a>\r\n");
      out.write("\r\n");
      out.write("  <div id=\"container\">\r\n");
      out.write("\r\n");
      out.write("    <div class=\"download\">\r\n");
      out.write("      <a href=\"http://github.com/atomantic/JavaScript-Playing-Cards/zipball/master\">\r\n");
      out.write("        <img border=\"0\" width=\"90\" src=\"http://github.com/images/modules/download/zip.png\"></a>\r\n");
      out.write("      <a href=\"http://github.com/atomantic/JavaScript-Playing-Cards/tarball/master\">\r\n");
      out.write("        <img border=\"0\" width=\"90\" src=\"http://github.com/images/modules/download/tar.png\"></a>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <h1><a href=\"http://github.com/atomantic/JavaScript-Playing-Cards\">JavaScript Playing Cards</a>\r\n");
      out.write("      <span class=\"small\">by <a href=\"http://github.com/atomantic\">Adam Eivy (antic | atomantic)</a></span></h1>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"description\">\r\n");
      out.write("      A playing card JavaScript and CSS library for creating standard deck games. The library is wrapped to allow it to act as a plugin for jquery (or another framework)\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <p>This is really just a proof-of-concept that a deck of cards can be managed in JavaScript/CSS</p>\r\n");
      out.write("    <p>You might be interested in my hand-painted, beetle-themed playing card deck, which I'll be releasing to Kickstarter ~Aug 1, 2015: http://bit.ly/beetledeck</p>\r\n");
      out.write("    <h2>License</h2>\r\n");
      out.write("<p>MIT/GPL</p>\r\n");
      out.write("<br/>      </p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <h2>Demo</h2>\r\n");
      out.write("    <div id=\"error\"></div>\r\n");
      out.write("    <input type=\"button\" id=\"shuffler\" value=\"shuffle\" />\r\n");
      out.write("    <input type=\"button\" id=\"draw\" value=\"draw a card\" />\r\n");
      out.write("    <input type=\"button\" id=\"addCard\" value=\"add drawn card back\" />\r\n");
      out.write("    <input type=\"button\" id=\"shuffleDraw\" value=\"shuffle, then draw\" />\r\n");
      out.write("    <input type=\"button\" id=\"orderByRank\" value=\"order by rank\" />\r\n");
      out.write("    <input type=\"button\" id=\"orderBySuit\" value=\"order by suit\" />\r\n");
      out.write("    <h2>Card Deck</h2>\r\n");
      out.write("    <div id=\"cardDeck\"></div>\r\n");
      out.write("    <br />\r\n");
      out.write("    <h2>Drawn Cards</h2>\r\n");
      out.write("    <div id=\"yourHand\"></div>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"playingCards.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\" src=\"playingCards.ui.js\"></script>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        /*\r\n");
      out.write("         * example throwing cards on the table\r\n");
      out.write("         */\r\n");
      out.write("        $(document).ready(function(){\r\n");
      out.write("            var cardDeck = $(\"#cardDeck\").playingCards();\r\n");
      out.write("            cardDeck.spread(); // show it\r\n");
      out.write("\r\n");
      out.write("            var hand = [];\r\n");
      out.write("            var showError = function(msg){\r\n");
      out.write("                $('#error').html(msg).show();\r\n");
      out.write("                setTimeout(function(){\r\n");
      out.write("                    $('#error').fadeOut('slow');\r\n");
      out.write("                },3000);\r\n");
      out.write("            };\r\n");
      out.write("            var showHand = function(){\r\n");
      out.write("                var el = $('#yourHand');\r\n");
      out.write("                el.html('');\r\n");
      out.write("                for(var i=0;i<hand.length;i++){\r\n");
      out.write("                    el.append(hand[i].getHTML());\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("            var doShuffle = function(){\r\n");
      out.write("                cardDeck.shuffle();\r\n");
      out.write("                cardDeck.spread(); // update card table\r\n");
      out.write("                updateDeckIDs();\r\n");
      out.write("            };\r\n");
      out.write("            var doDrawCard = function(){\r\n");
      out.write("                var c = cardDeck.draw();\r\n");
      out.write("                if(!c){\r\n");
      out.write("                    showError('no more cards');\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("                hand[hand.length] = c;\r\n");
      out.write("                cardDeck.spread();\r\n");
      out.write("                updateDeckIDs();\r\n");
      out.write("                showHand();\r\n");
      out.write("             \r\n");
      out.write("            };\r\n");
      out.write("            var doPickCard = function(cardNum){      \r\n");
      out.write("                var c = cardDeck.pickCard(cardNum);\r\n");
      out.write("                if(!c){\r\n");
      out.write("                    var Deck = $(\"#cardDeck\").children(\".playingCard\").map(function(){return this;}).get();\r\n");
      out.write("                    if(Deck.length > 0)\r\n");
      out.write("                    {\r\n");
      out.write("                        c = cardDeck.draw();\r\n");
      out.write("                    }\r\n");
      out.write("                    else\r\n");
      out.write("                    {\r\n");
      out.write("                    showError('no more cards');\r\n");
      out.write("                    return;\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("                hand[hand.length] = c;\r\n");
      out.write("                cardDeck.spread();\r\n");
      out.write("                updateDeckIDs();\r\n");
      out.write("                showHand();\r\n");
      out.write("                updateHandIDs();\r\n");
      out.write("            };\r\n");
      out.write("            var doPutBackCard = function(cardid){  \r\n");
      out.write("                 var c = hand[Number(cardid)];\r\n");
      out.write("                if(!c){\r\n");
      out.write("                    if (hand.length > 0)\r\n");
      out.write("                    {\r\n");
      out.write("                       doAddCard();\r\n");
      out.write("                       return;\r\n");
      out.write("                    }\r\n");
      out.write("                    else\r\n");
      out.write("                    {\r\n");
      out.write("                    showError('no more cards');\r\n");
      out.write("                    return;\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("                cardDeck.addCard(c);\r\n");
      out.write("                cardDeck.spread();\r\n");
      out.write("                updateDeckIDs();\r\n");
      out.write("                hand.splice(cardid, 1);\r\n");
      out.write("                showHand();\r\n");
      out.write("                updateHandIDs();\r\n");
      out.write("            };\r\n");
      out.write("            var doOrderByRank = function(){\r\n");
      out.write("                cardDeck.orderByRank();\r\n");
      out.write("                cardDeck.spread(); // update card table\r\n");
      out.write("                updateDeckIDs();\r\n");
      out.write("            };\r\n");
      out.write("            var doOrderBySuit = function(){\r\n");
      out.write("                cardDeck.orderBySuit();\r\n");
      out.write("                cardDeck.spread(); // update card table\r\n");
      out.write("                updateDeckIDs();\r\n");
      out.write("            };\r\n");
      out.write("            \r\n");
      out.write("            var updateDeckIDs = function(){\r\n");
      out.write("                var Deck = $(\"#cardDeck\").children(\".playingCard\").map(function(){return this;}).get();\r\n");
      out.write("                for(var i=0;i<Deck.length;i++){\r\n");
      out.write("                   $(Deck[i]).attr('id',i);\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("            var updateHandIDs = function(){\r\n");
      out.write("                var Hand = $(\"#yourHand\").children(\".playingCard\").map(function(){return this;}).get();\r\n");
      out.write("                for(var i=0;i<Hand.length;i++){\r\n");
      out.write("                   $(Hand[i]).attr('id',i);\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("            \r\n");
      out.write("            var doAddCard = function(){\r\n");
      out.write("               if(!hand.length){\r\n");
      out.write("                    showError('your hand is empty');\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("                var c = hand.pop();\r\n");
      out.write("                showHand();\r\n");
      out.write("                cardDeck.addCard(c);\r\n");
      out.write("                cardDeck.spread();\r\n");
      out.write("                 updateDeckIDs();\r\n");
      out.write("                updateHandIDs();  \r\n");
      out.write("                \r\n");
      out.write("            };\r\n");
      out.write("      \r\n");
      out.write("            $('#cardDeck').on('click', function (event) {\r\n");
      out.write("            var target = $(event.target).parents(\".playingCard\").map(function(){return this;}).get();\r\n");
      out.write("           \r\n");
      out.write("            doPickCard($(target[0]).attr('id'));\r\n");
      out.write("            }); \r\n");
      out.write("         \r\n");
      out.write("            \r\n");
      out.write("             $('#yourHand').on('click', function (event) {\r\n");
      out.write("            var target = $(event.target).parents(\".playingCard\").map(function(){return this;}).get();\r\n");
      out.write("            doPutBackCard($(target[0]).attr('id'));\r\n");
      out.write("            }); \r\n");
      out.write("             \r\n");
      out.write("            $('#shuffler').click(doShuffle);\r\n");
      out.write("            $('#draw').click(doDrawCard);\r\n");
      out.write("            $('#shuffleDraw').click(function(){\r\n");
      out.write("                doShuffle();\r\n");
      out.write("                doDrawCard();\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("            $('#addCard').click(doAddCard);\r\n");
      out.write("            $('#orderByRank').click(doOrderByRank);\r\n");
      out.write("            $('#orderBySuit').click(doOrderBySuit);\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("        /*\r\n");
      out.write("        // if we weren't using jquery to handle the document ready state, we would do this:\r\n");
      out.write("        if (window.addEventListener) {\r\n");
      out.write("            window.addEventListener(\"load\",initPlayingCards,false);\r\n");
      out.write("        } else if (window.attachEvent) {\r\n");
      out.write("            window.attachEvent(\"onload\",initPlayingCards);\r\n");
      out.write("        } else {\r\n");
      out.write("            window.onload = function() {initPlayingCards();}\r\n");
      out.write("        }\r\n");
      out.write("        function initPlayingCards() {\r\n");
      out.write("            cardDeck = new playingCards();\r\n");
      out.write("        }\r\n");
      out.write("        */\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("    <h2>Download</h2>\r\n");
      out.write("    <p>\r\n");
      out.write("      You can download this project in either\r\n");
      out.write("      <a href=\"http://github.com/atomantic/JavaScript-Playing-Cards/zipball/master\">zip</a> or\r\n");
      out.write("      <a href=\"http://github.com/atomantic/JavaScript-Playing-Cards/tarball/master\">tar</a> formats.\r\n");
      out.write("    </p>\r\n");
      out.write("    <p>You can also clone the project with <a href=\"http://git-scm.com\">Git</a>\r\n");
      out.write("      by running:\r\n");
      out.write("      <pre>$ git clone git://github.com/atomantic/JavaScript-Playing-Cards</pre>\r\n");
      out.write("    </p>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"footer\">\r\n");
      out.write("      get the source code on GitHub : <a href=\"http://github.com/atomantic/JavaScript-Playing-Cards\">atomantic/JavaScript-Playing-Cards</a>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("  </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("?\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
